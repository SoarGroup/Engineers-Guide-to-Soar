cd ".."
load file "fake_agent_input.soar"

### PART 1: Initialize an empty linked-list structure in WM for sorting suppliers ###

##############################
##  OPERATOR: init
# Initialize the state with main structures we'll use during later processing
##############################

## FIXME:
sp {propose*suppliersort-main*init
    "Propose to init the state structures"
    (state <s> ^type state
              -^supplier-list )
    -->
    # Propose the "init" operator with the "required" preference
    # (Replace the underscores with the operator proposal and preference.)
    ____}

## FIXME:
sp {apply*suppliersort-main*init
    "Init the state with a struct for collecting sorted suppliers"
    (state <s> ^operator.name init)
    -->
    # (Replace the underscores with code that creates a new "^supplier-list" object,
    #   and initializes the object with a "^count 0" WME underneath it.)
	____
    ____}


### PART 2: Build a linked-list from selected suppliers

##############################
##  OPERATOR: select-supplier
# Propose any given input supplier.
# Pushes the selected supplier to the cached list for output.
##############################

# FIXME:
# sp {propose*suppliersort-main*select-supplier
#     "Propose any supplier given on the input-link."
#     (state <s> ^io.input-link.candidate-supplier <sup>
#                 ^supplier-list <sup-list>)
#     # (Replace the underscores with code so that this proposal will
#     #   retract as soon as <sup-list> has a supplier with the same name as <sup>.)
#     ____
#     ____
#     -->
#     (<s> ^operator <o> +)
#     (<o> ^name select-supplier
#         ^supplier <sup>)}

# Prefer one supplier operator before another based on supplier total-score
sp {prefer*suppliersort-main*select-supplier*total-score
    "Prefer suppliers in decreasing order of total-score"
    (state <s> ^operator <o1> +
                ^operator <o2> +)
    # Test that <o1>'s supplier's total-score is greater than <o2>'s supplier's total-score
    (<o1> ^name select-supplier
        ^supplier.total-score <sup1-score>)
    (<o2> ^name select-supplier
        ^supplier.total-score < <sup1-score>)
    -->
    # Prefer <o1> as better than <o2>
    (<s> ^operator <o1> > <o2>)}

## FIXME:
# sp {apply*suppliersort-main*select-supplier*create-first
#     "Create the first- and last-supplier symbols with the first selected supplier"
#     # (Replace the underscores with a test that the current operator is "select-supplier".
#     #   You'll want to reference the name of the operator's supplier also so you can use it on the RHS of this rule.
#     #   Use <sup-name> for the supplier name to match the provided code on the RHS.)
#     ____
#     # (Replace the underscores with a test that the supplier-list object has 0 suppliers.)
#     ____
#     -->
#     # Add the first supplier to the list
#     # (Replace the underscores with code that creates a new item in the list with name <sup-name> and rank 1.
#     #   You can copy this code from the slides.)
#     ____
#     # Update the list's count of items
#     # (Replace the underscores with code that removes the old "^count 0" WME from supplier-list and replaces it with "^count 1".)
#     ____
#     # Create the first- and last-supplier augmentations
#     # (Replace the underscores with code that creates the list's ^first-supplier and ^last-supplier augmentations with values set to <sup-new>.
#     #   You can copy this code from the slides.)
# 	(write |** OUTPUT: First try | <sup-name> (crlf))}

## FIXME:
# sp {apply*suppliersort-main*select-supplier*append
#     "Append this supplier to the existing list"
#     # (Replace the underscores with a test that the current operator is "select-supplier".)
#     ____
#     # (Replace the underscores with a test that this operator's supplier
#     #   is not already the last-supplier of the supplier-list object,
#     #   so that this apply rule does not fire more than once.
#     #   You will also want to test the current list ^count to reference the value on the RHS.)
#     ____
#     -->
#     # Add the supplier to the list
#     # (Replace the underscores with code that adds a new supplier object to the list.
#     #   You can copy code you used for this in the previous rule, but modify it so 
#     #   the new object's rank is one more than the current list size.)
#     ____
#     # Update the list's count of items
#     # (Replace the underscores with code that removes the old count WME from supplier-list and replaces it with a count value of the new list size.)
#     ____
#     # Update the link to the last supplier in the list
#     # (Replace the underscores with code that replaces the old ^last-supplier WME with a new one that points to the new supplier.)
#     ____
#     # Create the link between the old last item and the new item
#     # (Replace the underscores with code that creates a ^next link from the old last-supplier item to the new item.)
#     ____
# 	(write |** OUTPUT: Then try | <sup-name> (crlf))}


### PART 3: Output the single linked-list once all suppliers have been evaluated

##############################
##  OPERATOR: output-supplier-list
# When all preferences are made, output the resulting ordered list
##############################

sp {propose*suppliersort-main*output-supplier-list*list-exists
    "If the output list exists, propose to output it with worst preference so it is sent after the list is fully curated."
    # NOTICE: This differs from our Project 04 code.
    #   It tests if the supplier-list has been initialized.
    (state <s> ^supplier-list <sup-list>)
    -->
    # NOTICE: Unlike the version of this operator from the previous project, we do not need the indifferent preference,
    #  because this operator will only be proposed once for the entire list.)
    (<s> ^operator <o> + <)
    (<o> ^name output-supplier-list)}

sp {apply*suppliersort-main*output-supplier-list
    (state <s> ^operator.name output-supplier-list
        ^supplier-list <sup-list>
        ^io.output-link <ol>)
    -->
    # Send the output
    (<ol> ^supplier-list <sup-list>)
    (interrupt)
	(write |*** DONE ***| (crlf) (crlf))}
